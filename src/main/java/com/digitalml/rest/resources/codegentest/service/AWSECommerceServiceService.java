package com.digitalml.rest.resources.codegentest.service;
    	
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import java.net.URL;

import org.apache.commons.collections.CollectionUtils;

import java.lang.Object;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.ws.rs.core.SecurityContext;
import java.security.AccessControlException;

import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;
import javax.validation.constraints.*;

import org.dozer.DozerBeanMapper;
import org.dozer.Mapper;

// Import any model objects used by the interface

import com.digitalml.rest.resources.codegentest.*;

/**
 * Service: AWSECommerceService
 * 120
 *
 * This service has been automatically generated by Ignite
 *
 * @author admin
 * @version 1.0
 *
 */

public abstract class AWSECommerceServiceService {

	private static final Logger LOGGER = LoggerFactory.getLogger(AWSECommerceServiceService.class);

	// Required for JSR-303 validation
	static private ValidatorFactory validatorFactory = Validation.buildDefaultValidatorFactory();

	protected static Mapper mapper;

	static {
		URL configFile = AWSECommerceServiceService.class.getResource("AWSECommerceServiceServiceMappings.xml");
		if (configFile != null) {

			List<String> mappingFiles = new ArrayList<String>();
			mappingFiles.add(configFile.toExternalForm());
			mapper = new DozerBeanMapper(mappingFiles);

		} else {
			mapper = new DozerBeanMapper(); // Use default wildcard mappings only
		}
	}

	protected boolean checkPermissions(SecurityContext securityContext) throws AccessControlException {
		return true;
	}

	/**
	Implements method cartAdd	*/
	public CartAddReturnDTO cartAdd(SecurityContext securityContext, CartAddInputParametersDTO inputs)  {

		if (LOGGER.isDebugEnabled())
			LOGGER.debug("Entered method cartAdd");

		// Do any security checks
		if (securityContext == null)
			throw new AccessControlException("No SecurityContext available so cannot access cartAdd");

		if (!checkPermissions(securityContext))
			throw new AccessControlException("Insufficient permissions to access cartAdd");

		CartAddReturnDTO returnValue = new CartAddReturnDTO();
        CartAddCurrentStateDTO currentState = new CartAddCurrentStateDTO();
        
        // Setup the inputs for the first process step
        mapper.map(inputs, currentState.getInputs());
        
		Object returnDTO = null;
		return returnValue;
	}

	/**
	Implements method browseNodeLookup	*/
	public BrowseNodeLookupReturnDTO browseNodeLookup(SecurityContext securityContext, BrowseNodeLookupInputParametersDTO inputs)  {

		if (LOGGER.isDebugEnabled())
			LOGGER.debug("Entered method browseNodeLookup");

		// Do any security checks
		if (securityContext == null)
			throw new AccessControlException("No SecurityContext available so cannot access browseNodeLookup");

		if (!checkPermissions(securityContext))
			throw new AccessControlException("Insufficient permissions to access browseNodeLookup");

		BrowseNodeLookupReturnDTO returnValue = new BrowseNodeLookupReturnDTO();
        BrowseNodeLookupCurrentStateDTO currentState = new BrowseNodeLookupCurrentStateDTO();
        
        // Setup the inputs for the first process step
        mapper.map(inputs, currentState.getInputs());
        
		Object returnDTO = null;
		return returnValue;
	}

	/**
	Implements method cartModify	*/
	public CartModifyReturnDTO cartModify(SecurityContext securityContext, CartModifyInputParametersDTO inputs)  {

		if (LOGGER.isDebugEnabled())
			LOGGER.debug("Entered method cartModify");

		// Do any security checks
		if (securityContext == null)
			throw new AccessControlException("No SecurityContext available so cannot access cartModify");

		if (!checkPermissions(securityContext))
			throw new AccessControlException("Insufficient permissions to access cartModify");

		CartModifyReturnDTO returnValue = new CartModifyReturnDTO();
        CartModifyCurrentStateDTO currentState = new CartModifyCurrentStateDTO();
        
        // Setup the inputs for the first process step
        mapper.map(inputs, currentState.getInputs());
        
		Object returnDTO = null;
		return returnValue;
	}

	/**
	Implements method cartGet	*/
	public CartGetReturnDTO cartGet(SecurityContext securityContext, CartGetInputParametersDTO inputs)  {

		if (LOGGER.isDebugEnabled())
			LOGGER.debug("Entered method cartGet");

		// Do any security checks
		if (securityContext == null)
			throw new AccessControlException("No SecurityContext available so cannot access cartGet");

		if (!checkPermissions(securityContext))
			throw new AccessControlException("Insufficient permissions to access cartGet");

		CartGetReturnDTO returnValue = new CartGetReturnDTO();
        CartGetCurrentStateDTO currentState = new CartGetCurrentStateDTO();
        
        // Setup the inputs for the first process step
        mapper.map(inputs, currentState.getInputs());
        
		Object returnDTO = null;
		return returnValue;
	}

	/**
	Implements method cartCreate	*/
	public CartCreateReturnDTO cartCreate(SecurityContext securityContext, CartCreateInputParametersDTO inputs)  {

		if (LOGGER.isDebugEnabled())
			LOGGER.debug("Entered method cartCreate");

		// Do any security checks
		if (securityContext == null)
			throw new AccessControlException("No SecurityContext available so cannot access cartCreate");

		if (!checkPermissions(securityContext))
			throw new AccessControlException("Insufficient permissions to access cartCreate");

		CartCreateReturnDTO returnValue = new CartCreateReturnDTO();
        CartCreateCurrentStateDTO currentState = new CartCreateCurrentStateDTO();
        
        // Setup the inputs for the first process step
        mapper.map(inputs, currentState.getInputs());
        
		Object returnDTO = null;
		return returnValue;
	}

	/**
	Implements method itemSearch	*/
	public ItemSearchReturnDTO itemSearch(SecurityContext securityContext, ItemSearchInputParametersDTO inputs)  {

		if (LOGGER.isDebugEnabled())
			LOGGER.debug("Entered method itemSearch");

		// Do any security checks
		if (securityContext == null)
			throw new AccessControlException("No SecurityContext available so cannot access itemSearch");

		if (!checkPermissions(securityContext))
			throw new AccessControlException("Insufficient permissions to access itemSearch");

		ItemSearchReturnDTO returnValue = new ItemSearchReturnDTO();
        ItemSearchCurrentStateDTO currentState = new ItemSearchCurrentStateDTO();
        
        // Setup the inputs for the first process step
        mapper.map(inputs, currentState.getInputs());
        
		Object returnDTO = null;
		return returnValue;
	}

	/**
	Implements method cartClear	*/
	public CartClearReturnDTO cartClear(SecurityContext securityContext, CartClearInputParametersDTO inputs)  {

		if (LOGGER.isDebugEnabled())
			LOGGER.debug("Entered method cartClear");

		// Do any security checks
		if (securityContext == null)
			throw new AccessControlException("No SecurityContext available so cannot access cartClear");

		if (!checkPermissions(securityContext))
			throw new AccessControlException("Insufficient permissions to access cartClear");

		CartClearReturnDTO returnValue = new CartClearReturnDTO();
        CartClearCurrentStateDTO currentState = new CartClearCurrentStateDTO();
        
        // Setup the inputs for the first process step
        mapper.map(inputs, currentState.getInputs());
        
		Object returnDTO = null;
		return returnValue;
	}

	/**
	Implements method similarityLookup	*/
	public SimilarityLookupReturnDTO similarityLookup(SecurityContext securityContext, SimilarityLookupInputParametersDTO inputs)  {

		if (LOGGER.isDebugEnabled())
			LOGGER.debug("Entered method similarityLookup");

		// Do any security checks
		if (securityContext == null)
			throw new AccessControlException("No SecurityContext available so cannot access similarityLookup");

		if (!checkPermissions(securityContext))
			throw new AccessControlException("Insufficient permissions to access similarityLookup");

		SimilarityLookupReturnDTO returnValue = new SimilarityLookupReturnDTO();
        SimilarityLookupCurrentStateDTO currentState = new SimilarityLookupCurrentStateDTO();
        
        // Setup the inputs for the first process step
        mapper.map(inputs, currentState.getInputs());
        
		Object returnDTO = null;
		return returnValue;
	}

	/**
	Implements method itemLookup	*/
	public ItemLookupReturnDTO itemLookup(SecurityContext securityContext, ItemLookupInputParametersDTO inputs)  {

		if (LOGGER.isDebugEnabled())
			LOGGER.debug("Entered method itemLookup");

		// Do any security checks
		if (securityContext == null)
			throw new AccessControlException("No SecurityContext available so cannot access itemLookup");

		if (!checkPermissions(securityContext))
			throw new AccessControlException("Insufficient permissions to access itemLookup");

		ItemLookupReturnDTO returnValue = new ItemLookupReturnDTO();
        ItemLookupCurrentStateDTO currentState = new ItemLookupCurrentStateDTO();
        
        // Setup the inputs for the first process step
        mapper.map(inputs, currentState.getInputs());
        
		Object returnDTO = null;
		return returnValue;
	}


    // Supporting Use Case and Process methods

	public abstract CartAddCurrentStateDTO cartAddUseCaseStep1(CartAddCurrentStateDTO currentState);


	public abstract BrowseNodeLookupCurrentStateDTO browseNodeLookupUseCaseStep1(BrowseNodeLookupCurrentStateDTO currentState);


	public abstract CartModifyCurrentStateDTO cartModifyUseCaseStep1(CartModifyCurrentStateDTO currentState);


	public abstract CartGetCurrentStateDTO cartGetUseCaseStep1(CartGetCurrentStateDTO currentState);


	public abstract CartCreateCurrentStateDTO cartCreateUseCaseStep1(CartCreateCurrentStateDTO currentState);


	public abstract ItemSearchCurrentStateDTO itemSearchUseCaseStep1(ItemSearchCurrentStateDTO currentState);


	public abstract CartClearCurrentStateDTO cartClearUseCaseStep1(CartClearCurrentStateDTO currentState);


	public abstract SimilarityLookupCurrentStateDTO similarityLookupUseCaseStep1(SimilarityLookupCurrentStateDTO currentState);


	public abstract ItemLookupCurrentStateDTO itemLookupUseCaseStep1(ItemLookupCurrentStateDTO currentState);


// Supporting Exception classes

// Supporting DTO classes


	/**
	 * Provides a DTO to hold the current state of the orchestration for the operation CartAdd.
	 * This allows the state to be easily passed in method calls.
	 */
	public static class CartAddCurrentStateDTO {
		
		private CartAddInputParametersDTO inputs;
		private CartAddReturnDTO returnObject;
		private CartAddReturnStatusDTO errorState;
		// DTOs for orchestration
		
		public CartAddCurrentStateDTO() {
			initialiseDTOs();
		}

		public CartAddCurrentStateDTO(CartAddInputParametersDTO inputs) {
			initialiseDTOs();
			this.inputs = inputs;
		}
		
		// Add extra DTOs for steps
		public CartAddInputParametersDTO getInputs() {
			return inputs;
		}

		
		public void setErrorState(CartAddReturnStatusDTO errorState) {
			this.errorState = errorState;
		}

		public CartAddReturnStatusDTO getErrorState() {
			return errorState;
		}

		public CartAddReturnDTO getReturnObject() {
			return returnObject;
		}
		
		private void initialiseDTOs() {
			inputs = new CartAddInputParametersDTO();
			returnObject = new CartAddReturnDTO();
			errorState = new CartAddReturnStatusDTO();
		
		}			
	};

	/**
	 * Holds the return value for the operation CartAdd
	 */
	public static class CartAddReturnDTO {
		private com.amazon.webservices.AWSECommerceService._2013._08._01.CartAddResponse cartAddResponse;
		
		{
    		initialiseDTO();
    	}
    	
    	private void initialiseDTO() {
    	    cartAddResponse = new com.amazon.webservices.AWSECommerceService._2013._08._01.CartAddResponse();
    	}

		public com.amazon.webservices.AWSECommerceService._2013._08._01.CartAddResponse getCartAddResponse() {
			return cartAddResponse;
		}

		public void setCartAddResponse(com.amazon.webservices.AWSECommerceService._2013._08._01.CartAddResponse cartAddResponse) {
			this.cartAddResponse = cartAddResponse;
		}

	};

	/**
	 * Holds the return value for the operation CartAdd when an exception has been thrown.
	 */
	public static class CartAddReturnStatusDTO {

		private String exceptionMessage;

		public CartAddReturnStatusDTO() {
		}

		public CartAddReturnStatusDTO(String exceptionMessage) {
			this.exceptionMessage = exceptionMessage;
		}



		public String getExceptionMessage() {
			return exceptionMessage;
		}

		public void setExceptionMessage(String exceptionMessage) {
			this.exceptionMessage = exceptionMessage;
		}
	};

	/**
	 * Holds the input parameters for the operation CartAdd in a single DTO which aids
	 * validation and allows the inputs to be easily passed in method calls.
	 */
	public static class CartAddInputParametersDTO {


		private com.amazon.webservices.AWSECommerceService._2013._08._01.CartAdd cartAdd;

		public com.amazon.webservices.AWSECommerceService._2013._08._01.CartAdd getCartAdd() {
			return cartAdd;
		}

		public void setCartAdd(com.amazon.webservices.AWSECommerceService._2013._08._01.CartAdd cartAdd) {
			this.cartAdd = cartAdd;
		}


		public boolean validate() {
			Validator validator = validatorFactory.getValidator();
			Set<ConstraintViolation<CartAddInputParametersDTO>> errors = validator.validate(this);
			return CollectionUtils.isEmpty(errors);
		}

		public List<String> validateReport() {
			Validator validator = validatorFactory.getValidator();
			Set<ConstraintViolation<CartAddInputParametersDTO>> errors = validator.validate(this);

			List<String> results = new ArrayList<String>();
			if (CollectionUtils.isNotEmpty(errors))
				for (ConstraintViolation<CartAddInputParametersDTO> error : errors) {
					StringBuffer sb = new StringBuffer();
					sb.append(error.getMessage());
					results.add(sb.toString());
				}

			return results;
		}
	};


	/**
	 * Provides a DTO to hold the current state of the orchestration for the operation BrowseNodeLookup.
	 * This allows the state to be easily passed in method calls.
	 */
	public static class BrowseNodeLookupCurrentStateDTO {
		
		private BrowseNodeLookupInputParametersDTO inputs;
		private BrowseNodeLookupReturnDTO returnObject;
		private BrowseNodeLookupReturnStatusDTO errorState;
		// DTOs for orchestration
		
		public BrowseNodeLookupCurrentStateDTO() {
			initialiseDTOs();
		}

		public BrowseNodeLookupCurrentStateDTO(BrowseNodeLookupInputParametersDTO inputs) {
			initialiseDTOs();
			this.inputs = inputs;
		}
		
		// Add extra DTOs for steps
		public BrowseNodeLookupInputParametersDTO getInputs() {
			return inputs;
		}

		
		public void setErrorState(BrowseNodeLookupReturnStatusDTO errorState) {
			this.errorState = errorState;
		}

		public BrowseNodeLookupReturnStatusDTO getErrorState() {
			return errorState;
		}

		public BrowseNodeLookupReturnDTO getReturnObject() {
			return returnObject;
		}
		
		private void initialiseDTOs() {
			inputs = new BrowseNodeLookupInputParametersDTO();
			returnObject = new BrowseNodeLookupReturnDTO();
			errorState = new BrowseNodeLookupReturnStatusDTO();
		
		}			
	};

	/**
	 * Holds the return value for the operation BrowseNodeLookup
	 */
	public static class BrowseNodeLookupReturnDTO {
		private com.amazon.webservices.AWSECommerceService._2013._08._01.BrowseNodeLookupResponse browseNodeLookupResponse;
		
		{
    		initialiseDTO();
    	}
    	
    	private void initialiseDTO() {
    	    browseNodeLookupResponse = new com.amazon.webservices.AWSECommerceService._2013._08._01.BrowseNodeLookupResponse();
    	}

		public com.amazon.webservices.AWSECommerceService._2013._08._01.BrowseNodeLookupResponse getBrowseNodeLookupResponse() {
			return browseNodeLookupResponse;
		}

		public void setBrowseNodeLookupResponse(com.amazon.webservices.AWSECommerceService._2013._08._01.BrowseNodeLookupResponse browseNodeLookupResponse) {
			this.browseNodeLookupResponse = browseNodeLookupResponse;
		}

	};

	/**
	 * Holds the return value for the operation BrowseNodeLookup when an exception has been thrown.
	 */
	public static class BrowseNodeLookupReturnStatusDTO {

		private String exceptionMessage;

		public BrowseNodeLookupReturnStatusDTO() {
		}

		public BrowseNodeLookupReturnStatusDTO(String exceptionMessage) {
			this.exceptionMessage = exceptionMessage;
		}



		public String getExceptionMessage() {
			return exceptionMessage;
		}

		public void setExceptionMessage(String exceptionMessage) {
			this.exceptionMessage = exceptionMessage;
		}
	};

	/**
	 * Holds the input parameters for the operation BrowseNodeLookup in a single DTO which aids
	 * validation and allows the inputs to be easily passed in method calls.
	 */
	public static class BrowseNodeLookupInputParametersDTO {


		private com.amazon.webservices.AWSECommerceService._2013._08._01.BrowseNodeLookup browseNodeLookup;

		public com.amazon.webservices.AWSECommerceService._2013._08._01.BrowseNodeLookup getBrowseNodeLookup() {
			return browseNodeLookup;
		}

		public void setBrowseNodeLookup(com.amazon.webservices.AWSECommerceService._2013._08._01.BrowseNodeLookup browseNodeLookup) {
			this.browseNodeLookup = browseNodeLookup;
		}


		public boolean validate() {
			Validator validator = validatorFactory.getValidator();
			Set<ConstraintViolation<BrowseNodeLookupInputParametersDTO>> errors = validator.validate(this);
			return CollectionUtils.isEmpty(errors);
		}

		public List<String> validateReport() {
			Validator validator = validatorFactory.getValidator();
			Set<ConstraintViolation<BrowseNodeLookupInputParametersDTO>> errors = validator.validate(this);

			List<String> results = new ArrayList<String>();
			if (CollectionUtils.isNotEmpty(errors))
				for (ConstraintViolation<BrowseNodeLookupInputParametersDTO> error : errors) {
					StringBuffer sb = new StringBuffer();
					sb.append(error.getMessage());
					results.add(sb.toString());
				}

			return results;
		}
	};


	/**
	 * Provides a DTO to hold the current state of the orchestration for the operation CartModify.
	 * This allows the state to be easily passed in method calls.
	 */
	public static class CartModifyCurrentStateDTO {
		
		private CartModifyInputParametersDTO inputs;
		private CartModifyReturnDTO returnObject;
		private CartModifyReturnStatusDTO errorState;
		// DTOs for orchestration
		
		public CartModifyCurrentStateDTO() {
			initialiseDTOs();
		}

		public CartModifyCurrentStateDTO(CartModifyInputParametersDTO inputs) {
			initialiseDTOs();
			this.inputs = inputs;
		}
		
		// Add extra DTOs for steps
		public CartModifyInputParametersDTO getInputs() {
			return inputs;
		}

		
		public void setErrorState(CartModifyReturnStatusDTO errorState) {
			this.errorState = errorState;
		}

		public CartModifyReturnStatusDTO getErrorState() {
			return errorState;
		}

		public CartModifyReturnDTO getReturnObject() {
			return returnObject;
		}
		
		private void initialiseDTOs() {
			inputs = new CartModifyInputParametersDTO();
			returnObject = new CartModifyReturnDTO();
			errorState = new CartModifyReturnStatusDTO();
		
		}			
	};

	/**
	 * Holds the return value for the operation CartModify
	 */
	public static class CartModifyReturnDTO {
		private com.amazon.webservices.AWSECommerceService._2013._08._01.CartModifyResponse cartModifyResponse;
		
		{
    		initialiseDTO();
    	}
    	
    	private void initialiseDTO() {
    	    cartModifyResponse = new com.amazon.webservices.AWSECommerceService._2013._08._01.CartModifyResponse();
    	}

		public com.amazon.webservices.AWSECommerceService._2013._08._01.CartModifyResponse getCartModifyResponse() {
			return cartModifyResponse;
		}

		public void setCartModifyResponse(com.amazon.webservices.AWSECommerceService._2013._08._01.CartModifyResponse cartModifyResponse) {
			this.cartModifyResponse = cartModifyResponse;
		}

	};

	/**
	 * Holds the return value for the operation CartModify when an exception has been thrown.
	 */
	public static class CartModifyReturnStatusDTO {

		private String exceptionMessage;

		public CartModifyReturnStatusDTO() {
		}

		public CartModifyReturnStatusDTO(String exceptionMessage) {
			this.exceptionMessage = exceptionMessage;
		}



		public String getExceptionMessage() {
			return exceptionMessage;
		}

		public void setExceptionMessage(String exceptionMessage) {
			this.exceptionMessage = exceptionMessage;
		}
	};

	/**
	 * Holds the input parameters for the operation CartModify in a single DTO which aids
	 * validation and allows the inputs to be easily passed in method calls.
	 */
	public static class CartModifyInputParametersDTO {


		private com.amazon.webservices.AWSECommerceService._2013._08._01.CartModify cartModify;

		public com.amazon.webservices.AWSECommerceService._2013._08._01.CartModify getCartModify() {
			return cartModify;
		}

		public void setCartModify(com.amazon.webservices.AWSECommerceService._2013._08._01.CartModify cartModify) {
			this.cartModify = cartModify;
		}


		public boolean validate() {
			Validator validator = validatorFactory.getValidator();
			Set<ConstraintViolation<CartModifyInputParametersDTO>> errors = validator.validate(this);
			return CollectionUtils.isEmpty(errors);
		}

		public List<String> validateReport() {
			Validator validator = validatorFactory.getValidator();
			Set<ConstraintViolation<CartModifyInputParametersDTO>> errors = validator.validate(this);

			List<String> results = new ArrayList<String>();
			if (CollectionUtils.isNotEmpty(errors))
				for (ConstraintViolation<CartModifyInputParametersDTO> error : errors) {
					StringBuffer sb = new StringBuffer();
					sb.append(error.getMessage());
					results.add(sb.toString());
				}

			return results;
		}
	};


	/**
	 * Provides a DTO to hold the current state of the orchestration for the operation CartGet.
	 * This allows the state to be easily passed in method calls.
	 */
	public static class CartGetCurrentStateDTO {
		
		private CartGetInputParametersDTO inputs;
		private CartGetReturnDTO returnObject;
		private CartGetReturnStatusDTO errorState;
		// DTOs for orchestration
		
		public CartGetCurrentStateDTO() {
			initialiseDTOs();
		}

		public CartGetCurrentStateDTO(CartGetInputParametersDTO inputs) {
			initialiseDTOs();
			this.inputs = inputs;
		}
		
		// Add extra DTOs for steps
		public CartGetInputParametersDTO getInputs() {
			return inputs;
		}

		
		public void setErrorState(CartGetReturnStatusDTO errorState) {
			this.errorState = errorState;
		}

		public CartGetReturnStatusDTO getErrorState() {
			return errorState;
		}

		public CartGetReturnDTO getReturnObject() {
			return returnObject;
		}
		
		private void initialiseDTOs() {
			inputs = new CartGetInputParametersDTO();
			returnObject = new CartGetReturnDTO();
			errorState = new CartGetReturnStatusDTO();
		
		}			
	};

	/**
	 * Holds the return value for the operation CartGet
	 */
	public static class CartGetReturnDTO {
		private com.amazon.webservices.AWSECommerceService._2013._08._01.CartGetResponse cartGetResponse;
		
		{
    		initialiseDTO();
    	}
    	
    	private void initialiseDTO() {
    	    cartGetResponse = new com.amazon.webservices.AWSECommerceService._2013._08._01.CartGetResponse();
    	}

		public com.amazon.webservices.AWSECommerceService._2013._08._01.CartGetResponse getCartGetResponse() {
			return cartGetResponse;
		}

		public void setCartGetResponse(com.amazon.webservices.AWSECommerceService._2013._08._01.CartGetResponse cartGetResponse) {
			this.cartGetResponse = cartGetResponse;
		}

	};

	/**
	 * Holds the return value for the operation CartGet when an exception has been thrown.
	 */
	public static class CartGetReturnStatusDTO {

		private String exceptionMessage;

		public CartGetReturnStatusDTO() {
		}

		public CartGetReturnStatusDTO(String exceptionMessage) {
			this.exceptionMessage = exceptionMessage;
		}



		public String getExceptionMessage() {
			return exceptionMessage;
		}

		public void setExceptionMessage(String exceptionMessage) {
			this.exceptionMessage = exceptionMessage;
		}
	};

	/**
	 * Holds the input parameters for the operation CartGet in a single DTO which aids
	 * validation and allows the inputs to be easily passed in method calls.
	 */
	public static class CartGetInputParametersDTO {


		private com.amazon.webservices.AWSECommerceService._2013._08._01.CartGet cartGet;

		public com.amazon.webservices.AWSECommerceService._2013._08._01.CartGet getCartGet() {
			return cartGet;
		}

		public void setCartGet(com.amazon.webservices.AWSECommerceService._2013._08._01.CartGet cartGet) {
			this.cartGet = cartGet;
		}


		public boolean validate() {
			Validator validator = validatorFactory.getValidator();
			Set<ConstraintViolation<CartGetInputParametersDTO>> errors = validator.validate(this);
			return CollectionUtils.isEmpty(errors);
		}

		public List<String> validateReport() {
			Validator validator = validatorFactory.getValidator();
			Set<ConstraintViolation<CartGetInputParametersDTO>> errors = validator.validate(this);

			List<String> results = new ArrayList<String>();
			if (CollectionUtils.isNotEmpty(errors))
				for (ConstraintViolation<CartGetInputParametersDTO> error : errors) {
					StringBuffer sb = new StringBuffer();
					sb.append(error.getMessage());
					results.add(sb.toString());
				}

			return results;
		}
	};


	/**
	 * Provides a DTO to hold the current state of the orchestration for the operation CartCreate.
	 * This allows the state to be easily passed in method calls.
	 */
	public static class CartCreateCurrentStateDTO {
		
		private CartCreateInputParametersDTO inputs;
		private CartCreateReturnDTO returnObject;
		private CartCreateReturnStatusDTO errorState;
		// DTOs for orchestration
		
		public CartCreateCurrentStateDTO() {
			initialiseDTOs();
		}

		public CartCreateCurrentStateDTO(CartCreateInputParametersDTO inputs) {
			initialiseDTOs();
			this.inputs = inputs;
		}
		
		// Add extra DTOs for steps
		public CartCreateInputParametersDTO getInputs() {
			return inputs;
		}

		
		public void setErrorState(CartCreateReturnStatusDTO errorState) {
			this.errorState = errorState;
		}

		public CartCreateReturnStatusDTO getErrorState() {
			return errorState;
		}

		public CartCreateReturnDTO getReturnObject() {
			return returnObject;
		}
		
		private void initialiseDTOs() {
			inputs = new CartCreateInputParametersDTO();
			returnObject = new CartCreateReturnDTO();
			errorState = new CartCreateReturnStatusDTO();
		
		}			
	};

	/**
	 * Holds the return value for the operation CartCreate
	 */
	public static class CartCreateReturnDTO {
		private com.amazon.webservices.AWSECommerceService._2013._08._01.CartCreateResponse cartCreateResponse;
		
		{
    		initialiseDTO();
    	}
    	
    	private void initialiseDTO() {
    	    cartCreateResponse = new com.amazon.webservices.AWSECommerceService._2013._08._01.CartCreateResponse();
    	}

		public com.amazon.webservices.AWSECommerceService._2013._08._01.CartCreateResponse getCartCreateResponse() {
			return cartCreateResponse;
		}

		public void setCartCreateResponse(com.amazon.webservices.AWSECommerceService._2013._08._01.CartCreateResponse cartCreateResponse) {
			this.cartCreateResponse = cartCreateResponse;
		}

	};

	/**
	 * Holds the return value for the operation CartCreate when an exception has been thrown.
	 */
	public static class CartCreateReturnStatusDTO {

		private String exceptionMessage;

		public CartCreateReturnStatusDTO() {
		}

		public CartCreateReturnStatusDTO(String exceptionMessage) {
			this.exceptionMessage = exceptionMessage;
		}



		public String getExceptionMessage() {
			return exceptionMessage;
		}

		public void setExceptionMessage(String exceptionMessage) {
			this.exceptionMessage = exceptionMessage;
		}
	};

	/**
	 * Holds the input parameters for the operation CartCreate in a single DTO which aids
	 * validation and allows the inputs to be easily passed in method calls.
	 */
	public static class CartCreateInputParametersDTO {


		private com.amazon.webservices.AWSECommerceService._2013._08._01.CartCreate cartCreate;

		public com.amazon.webservices.AWSECommerceService._2013._08._01.CartCreate getCartCreate() {
			return cartCreate;
		}

		public void setCartCreate(com.amazon.webservices.AWSECommerceService._2013._08._01.CartCreate cartCreate) {
			this.cartCreate = cartCreate;
		}


		public boolean validate() {
			Validator validator = validatorFactory.getValidator();
			Set<ConstraintViolation<CartCreateInputParametersDTO>> errors = validator.validate(this);
			return CollectionUtils.isEmpty(errors);
		}

		public List<String> validateReport() {
			Validator validator = validatorFactory.getValidator();
			Set<ConstraintViolation<CartCreateInputParametersDTO>> errors = validator.validate(this);

			List<String> results = new ArrayList<String>();
			if (CollectionUtils.isNotEmpty(errors))
				for (ConstraintViolation<CartCreateInputParametersDTO> error : errors) {
					StringBuffer sb = new StringBuffer();
					sb.append(error.getMessage());
					results.add(sb.toString());
				}

			return results;
		}
	};


	/**
	 * Provides a DTO to hold the current state of the orchestration for the operation ItemSearch.
	 * This allows the state to be easily passed in method calls.
	 */
	public static class ItemSearchCurrentStateDTO {
		
		private ItemSearchInputParametersDTO inputs;
		private ItemSearchReturnDTO returnObject;
		private ItemSearchReturnStatusDTO errorState;
		// DTOs for orchestration
		
		public ItemSearchCurrentStateDTO() {
			initialiseDTOs();
		}

		public ItemSearchCurrentStateDTO(ItemSearchInputParametersDTO inputs) {
			initialiseDTOs();
			this.inputs = inputs;
		}
		
		// Add extra DTOs for steps
		public ItemSearchInputParametersDTO getInputs() {
			return inputs;
		}

		
		public void setErrorState(ItemSearchReturnStatusDTO errorState) {
			this.errorState = errorState;
		}

		public ItemSearchReturnStatusDTO getErrorState() {
			return errorState;
		}

		public ItemSearchReturnDTO getReturnObject() {
			return returnObject;
		}
		
		private void initialiseDTOs() {
			inputs = new ItemSearchInputParametersDTO();
			returnObject = new ItemSearchReturnDTO();
			errorState = new ItemSearchReturnStatusDTO();
		
		}			
	};

	/**
	 * Holds the return value for the operation ItemSearch
	 */
	public static class ItemSearchReturnDTO {
		private com.amazon.webservices.AWSECommerceService._2013._08._01.ItemSearchResponse itemSearchResponse;
		
		{
    		initialiseDTO();
    	}
    	
    	private void initialiseDTO() {
    	    itemSearchResponse = new com.amazon.webservices.AWSECommerceService._2013._08._01.ItemSearchResponse();
    	}

		public com.amazon.webservices.AWSECommerceService._2013._08._01.ItemSearchResponse getItemSearchResponse() {
			return itemSearchResponse;
		}

		public void setItemSearchResponse(com.amazon.webservices.AWSECommerceService._2013._08._01.ItemSearchResponse itemSearchResponse) {
			this.itemSearchResponse = itemSearchResponse;
		}

	};

	/**
	 * Holds the return value for the operation ItemSearch when an exception has been thrown.
	 */
	public static class ItemSearchReturnStatusDTO {

		private String exceptionMessage;

		public ItemSearchReturnStatusDTO() {
		}

		public ItemSearchReturnStatusDTO(String exceptionMessage) {
			this.exceptionMessage = exceptionMessage;
		}



		public String getExceptionMessage() {
			return exceptionMessage;
		}

		public void setExceptionMessage(String exceptionMessage) {
			this.exceptionMessage = exceptionMessage;
		}
	};

	/**
	 * Holds the input parameters for the operation ItemSearch in a single DTO which aids
	 * validation and allows the inputs to be easily passed in method calls.
	 */
	public static class ItemSearchInputParametersDTO {


		private com.amazon.webservices.AWSECommerceService._2013._08._01.ItemSearch itemSearch;

		public com.amazon.webservices.AWSECommerceService._2013._08._01.ItemSearch getItemSearch() {
			return itemSearch;
		}

		public void setItemSearch(com.amazon.webservices.AWSECommerceService._2013._08._01.ItemSearch itemSearch) {
			this.itemSearch = itemSearch;
		}


		public boolean validate() {
			Validator validator = validatorFactory.getValidator();
			Set<ConstraintViolation<ItemSearchInputParametersDTO>> errors = validator.validate(this);
			return CollectionUtils.isEmpty(errors);
		}

		public List<String> validateReport() {
			Validator validator = validatorFactory.getValidator();
			Set<ConstraintViolation<ItemSearchInputParametersDTO>> errors = validator.validate(this);

			List<String> results = new ArrayList<String>();
			if (CollectionUtils.isNotEmpty(errors))
				for (ConstraintViolation<ItemSearchInputParametersDTO> error : errors) {
					StringBuffer sb = new StringBuffer();
					sb.append(error.getMessage());
					results.add(sb.toString());
				}

			return results;
		}
	};


	/**
	 * Provides a DTO to hold the current state of the orchestration for the operation CartClear.
	 * This allows the state to be easily passed in method calls.
	 */
	public static class CartClearCurrentStateDTO {
		
		private CartClearInputParametersDTO inputs;
		private CartClearReturnDTO returnObject;
		private CartClearReturnStatusDTO errorState;
		// DTOs for orchestration
		
		public CartClearCurrentStateDTO() {
			initialiseDTOs();
		}

		public CartClearCurrentStateDTO(CartClearInputParametersDTO inputs) {
			initialiseDTOs();
			this.inputs = inputs;
		}
		
		// Add extra DTOs for steps
		public CartClearInputParametersDTO getInputs() {
			return inputs;
		}

		
		public void setErrorState(CartClearReturnStatusDTO errorState) {
			this.errorState = errorState;
		}

		public CartClearReturnStatusDTO getErrorState() {
			return errorState;
		}

		public CartClearReturnDTO getReturnObject() {
			return returnObject;
		}
		
		private void initialiseDTOs() {
			inputs = new CartClearInputParametersDTO();
			returnObject = new CartClearReturnDTO();
			errorState = new CartClearReturnStatusDTO();
		
		}			
	};

	/**
	 * Holds the return value for the operation CartClear
	 */
	public static class CartClearReturnDTO {
		private com.amazon.webservices.AWSECommerceService._2013._08._01.CartClearResponse cartClearResponse;
		
		{
    		initialiseDTO();
    	}
    	
    	private void initialiseDTO() {
    	    cartClearResponse = new com.amazon.webservices.AWSECommerceService._2013._08._01.CartClearResponse();
    	}

		public com.amazon.webservices.AWSECommerceService._2013._08._01.CartClearResponse getCartClearResponse() {
			return cartClearResponse;
		}

		public void setCartClearResponse(com.amazon.webservices.AWSECommerceService._2013._08._01.CartClearResponse cartClearResponse) {
			this.cartClearResponse = cartClearResponse;
		}

	};

	/**
	 * Holds the return value for the operation CartClear when an exception has been thrown.
	 */
	public static class CartClearReturnStatusDTO {

		private String exceptionMessage;

		public CartClearReturnStatusDTO() {
		}

		public CartClearReturnStatusDTO(String exceptionMessage) {
			this.exceptionMessage = exceptionMessage;
		}



		public String getExceptionMessage() {
			return exceptionMessage;
		}

		public void setExceptionMessage(String exceptionMessage) {
			this.exceptionMessage = exceptionMessage;
		}
	};

	/**
	 * Holds the input parameters for the operation CartClear in a single DTO which aids
	 * validation and allows the inputs to be easily passed in method calls.
	 */
	public static class CartClearInputParametersDTO {


		private com.amazon.webservices.AWSECommerceService._2013._08._01.CartClear cartClear;

		public com.amazon.webservices.AWSECommerceService._2013._08._01.CartClear getCartClear() {
			return cartClear;
		}

		public void setCartClear(com.amazon.webservices.AWSECommerceService._2013._08._01.CartClear cartClear) {
			this.cartClear = cartClear;
		}


		public boolean validate() {
			Validator validator = validatorFactory.getValidator();
			Set<ConstraintViolation<CartClearInputParametersDTO>> errors = validator.validate(this);
			return CollectionUtils.isEmpty(errors);
		}

		public List<String> validateReport() {
			Validator validator = validatorFactory.getValidator();
			Set<ConstraintViolation<CartClearInputParametersDTO>> errors = validator.validate(this);

			List<String> results = new ArrayList<String>();
			if (CollectionUtils.isNotEmpty(errors))
				for (ConstraintViolation<CartClearInputParametersDTO> error : errors) {
					StringBuffer sb = new StringBuffer();
					sb.append(error.getMessage());
					results.add(sb.toString());
				}

			return results;
		}
	};


	/**
	 * Provides a DTO to hold the current state of the orchestration for the operation SimilarityLookup.
	 * This allows the state to be easily passed in method calls.
	 */
	public static class SimilarityLookupCurrentStateDTO {
		
		private SimilarityLookupInputParametersDTO inputs;
		private SimilarityLookupReturnDTO returnObject;
		private SimilarityLookupReturnStatusDTO errorState;
		// DTOs for orchestration
		
		public SimilarityLookupCurrentStateDTO() {
			initialiseDTOs();
		}

		public SimilarityLookupCurrentStateDTO(SimilarityLookupInputParametersDTO inputs) {
			initialiseDTOs();
			this.inputs = inputs;
		}
		
		// Add extra DTOs for steps
		public SimilarityLookupInputParametersDTO getInputs() {
			return inputs;
		}

		
		public void setErrorState(SimilarityLookupReturnStatusDTO errorState) {
			this.errorState = errorState;
		}

		public SimilarityLookupReturnStatusDTO getErrorState() {
			return errorState;
		}

		public SimilarityLookupReturnDTO getReturnObject() {
			return returnObject;
		}
		
		private void initialiseDTOs() {
			inputs = new SimilarityLookupInputParametersDTO();
			returnObject = new SimilarityLookupReturnDTO();
			errorState = new SimilarityLookupReturnStatusDTO();
		
		}			
	};

	/**
	 * Holds the return value for the operation SimilarityLookup
	 */
	public static class SimilarityLookupReturnDTO {
		private com.amazon.webservices.AWSECommerceService._2013._08._01.SimilarityLookupResponse similarityLookupResponse;
		
		{
    		initialiseDTO();
    	}
    	
    	private void initialiseDTO() {
    	    similarityLookupResponse = new com.amazon.webservices.AWSECommerceService._2013._08._01.SimilarityLookupResponse();
    	}

		public com.amazon.webservices.AWSECommerceService._2013._08._01.SimilarityLookupResponse getSimilarityLookupResponse() {
			return similarityLookupResponse;
		}

		public void setSimilarityLookupResponse(com.amazon.webservices.AWSECommerceService._2013._08._01.SimilarityLookupResponse similarityLookupResponse) {
			this.similarityLookupResponse = similarityLookupResponse;
		}

	};

	/**
	 * Holds the return value for the operation SimilarityLookup when an exception has been thrown.
	 */
	public static class SimilarityLookupReturnStatusDTO {

		private String exceptionMessage;

		public SimilarityLookupReturnStatusDTO() {
		}

		public SimilarityLookupReturnStatusDTO(String exceptionMessage) {
			this.exceptionMessage = exceptionMessage;
		}



		public String getExceptionMessage() {
			return exceptionMessage;
		}

		public void setExceptionMessage(String exceptionMessage) {
			this.exceptionMessage = exceptionMessage;
		}
	};

	/**
	 * Holds the input parameters for the operation SimilarityLookup in a single DTO which aids
	 * validation and allows the inputs to be easily passed in method calls.
	 */
	public static class SimilarityLookupInputParametersDTO {


		private com.amazon.webservices.AWSECommerceService._2013._08._01.SimilarityLookup similarityLookup;

		public com.amazon.webservices.AWSECommerceService._2013._08._01.SimilarityLookup getSimilarityLookup() {
			return similarityLookup;
		}

		public void setSimilarityLookup(com.amazon.webservices.AWSECommerceService._2013._08._01.SimilarityLookup similarityLookup) {
			this.similarityLookup = similarityLookup;
		}


		public boolean validate() {
			Validator validator = validatorFactory.getValidator();
			Set<ConstraintViolation<SimilarityLookupInputParametersDTO>> errors = validator.validate(this);
			return CollectionUtils.isEmpty(errors);
		}

		public List<String> validateReport() {
			Validator validator = validatorFactory.getValidator();
			Set<ConstraintViolation<SimilarityLookupInputParametersDTO>> errors = validator.validate(this);

			List<String> results = new ArrayList<String>();
			if (CollectionUtils.isNotEmpty(errors))
				for (ConstraintViolation<SimilarityLookupInputParametersDTO> error : errors) {
					StringBuffer sb = new StringBuffer();
					sb.append(error.getMessage());
					results.add(sb.toString());
				}

			return results;
		}
	};


	/**
	 * Provides a DTO to hold the current state of the orchestration for the operation ItemLookup.
	 * This allows the state to be easily passed in method calls.
	 */
	public static class ItemLookupCurrentStateDTO {
		
		private ItemLookupInputParametersDTO inputs;
		private ItemLookupReturnDTO returnObject;
		private ItemLookupReturnStatusDTO errorState;
		// DTOs for orchestration
		
		public ItemLookupCurrentStateDTO() {
			initialiseDTOs();
		}

		public ItemLookupCurrentStateDTO(ItemLookupInputParametersDTO inputs) {
			initialiseDTOs();
			this.inputs = inputs;
		}
		
		// Add extra DTOs for steps
		public ItemLookupInputParametersDTO getInputs() {
			return inputs;
		}

		
		public void setErrorState(ItemLookupReturnStatusDTO errorState) {
			this.errorState = errorState;
		}

		public ItemLookupReturnStatusDTO getErrorState() {
			return errorState;
		}

		public ItemLookupReturnDTO getReturnObject() {
			return returnObject;
		}
		
		private void initialiseDTOs() {
			inputs = new ItemLookupInputParametersDTO();
			returnObject = new ItemLookupReturnDTO();
			errorState = new ItemLookupReturnStatusDTO();
		
		}			
	};

	/**
	 * Holds the return value for the operation ItemLookup
	 */
	public static class ItemLookupReturnDTO {
		private com.amazon.webservices.AWSECommerceService._2013._08._01.ItemLookupResponse itemLookupResponse;
		
		{
    		initialiseDTO();
    	}
    	
    	private void initialiseDTO() {
    	    itemLookupResponse = new com.amazon.webservices.AWSECommerceService._2013._08._01.ItemLookupResponse();
    	}

		public com.amazon.webservices.AWSECommerceService._2013._08._01.ItemLookupResponse getItemLookupResponse() {
			return itemLookupResponse;
		}

		public void setItemLookupResponse(com.amazon.webservices.AWSECommerceService._2013._08._01.ItemLookupResponse itemLookupResponse) {
			this.itemLookupResponse = itemLookupResponse;
		}

	};

	/**
	 * Holds the return value for the operation ItemLookup when an exception has been thrown.
	 */
	public static class ItemLookupReturnStatusDTO {

		private String exceptionMessage;

		public ItemLookupReturnStatusDTO() {
		}

		public ItemLookupReturnStatusDTO(String exceptionMessage) {
			this.exceptionMessage = exceptionMessage;
		}



		public String getExceptionMessage() {
			return exceptionMessage;
		}

		public void setExceptionMessage(String exceptionMessage) {
			this.exceptionMessage = exceptionMessage;
		}
	};

	/**
	 * Holds the input parameters for the operation ItemLookup in a single DTO which aids
	 * validation and allows the inputs to be easily passed in method calls.
	 */
	public static class ItemLookupInputParametersDTO {


		private com.amazon.webservices.AWSECommerceService._2013._08._01.ItemLookup itemLookup;

		public com.amazon.webservices.AWSECommerceService._2013._08._01.ItemLookup getItemLookup() {
			return itemLookup;
		}

		public void setItemLookup(com.amazon.webservices.AWSECommerceService._2013._08._01.ItemLookup itemLookup) {
			this.itemLookup = itemLookup;
		}


		public boolean validate() {
			Validator validator = validatorFactory.getValidator();
			Set<ConstraintViolation<ItemLookupInputParametersDTO>> errors = validator.validate(this);
			return CollectionUtils.isEmpty(errors);
		}

		public List<String> validateReport() {
			Validator validator = validatorFactory.getValidator();
			Set<ConstraintViolation<ItemLookupInputParametersDTO>> errors = validator.validate(this);

			List<String> results = new ArrayList<String>();
			if (CollectionUtils.isNotEmpty(errors))
				for (ConstraintViolation<ItemLookupInputParametersDTO> error : errors) {
					StringBuffer sb = new StringBuffer();
					sb.append(error.getMessage());
					results.add(sb.toString());
				}

			return results;
		}
	};

}